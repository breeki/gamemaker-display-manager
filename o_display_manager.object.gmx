<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Display properties

// ideal width or height (choose one to priotitize and the other to zero, generated later)
ideal_width = 0;
ideal_height = 247; 
zoom = 1; // higher zoom, bigger window
max_zoom = floor(display_get_width() / ideal_width); // max zoom calculation

aspect_ratio = display_get_width() / display_get_height(); // &gt;1 means landscape, 1 means square, &lt;1 means portrait

ideal_width = round(ideal_height * aspect_ratio);
// ideal_height = round(ideal_width / aspect_ratio);

// calculations for fullscreen scaling
if (display_get_width() mod ideal_width != 0)
{
    // display width is not a perfect multiple
    var d = round( display_get_width() / ideal_width ); // nearest whole number multiplier
    ideal_width = display_get_width() / d; // divide by nearest whole number multiplier
}
if (display_get_height() mod ideal_width != 0)
{
    // display height is not a perfect multiple
    var d = round( display_get_height() / ideal_height ); // nearest whole number multiplier
    ideal_height = display_get_height() / d; // divide by nearest whole number multiplier
}



// Check for odd numbers via bitwise operators
if (ideal_width &amp; 1)
{
    ideal_width++; // odd, add 1
}
if (ideal_height &amp; 1)
{
    ideal_height++; // odd, add 1
}



// set up each room's views
for (var i = 1; i &lt;= room_last; i++) // room_last is the index of the last room in the tree
{
    if (room_exists(i))
    {
        room_set_view(i, 0, true, 0, 0, ideal_width, ideal_height, 0, 0, ideal_width, ideal_height, 0, 0, 0, 0, -1);
        room_set_view_enabled(i, true);
    }
}

// update the rest of the display layers for the project
surface_resize(application_surface, ideal_width, ideal_height); // application surface
display_set_gui_size(ideal_width, ideal_height); // gui layer
window_set_size(ideal_width, ideal_height); // window

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center window
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Zoom window
if (keyboard_check_pressed(ord('Z')))
{
    zoom++;
    if (zoom &gt; max_zoom)
    {
        zoom = 1;
    }
    window_set_size(ideal_width * zoom, ideal_height * zoom);
    
    // resize our application surface to fit the window (PERFORMANCE HIT)
    surface_resize(application_surface, ideal_width * zoom, ideal_height * zoom);
    // zooming here by four times means upping resolition by 4 times, not always nessecary
    // best to find a happy balance (like 2 instead of 5 which will help a lot without throttle) 
    alarm[0] = 1; // schedule the window center call for next frame
}

if (keyboard_check_pressed(ord('X')) &amp;&amp; zoom &gt; 1)
{
    zoom--;
    window_set_size(ideal_width * zoom, ideal_height * zoom);
    
    // resize our application surface to fit the window (PERFORMANCE HIT)
    surface_resize(application_surface, ideal_width * zoom, ideal_height * zoom);
    alarm[0] = 1; // schedule the window center call for next frame
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(5, 5, "Top Left");

draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
draw_text(display_get_gui_width() - 5, display_get_gui_height() - 5, "Bottom Right");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
